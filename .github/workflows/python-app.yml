name: Test Pyvalor

on:
  push:
    branches: [ "pyvalor-testing" ]
  pull_request:
    branches: [ "pyvalor-testing" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest grpcio-tools coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Generate gRPC files
      run: |
        python -m grpc_tools.protoc --proto_path=protos --python_out=rpc --grpc_python_out=rpc --pyi_out=rpc protos/*.proto
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        coverage run -m pytest
    - name: Generate coverage report and set output
      run: |
        coverage report > coverage.txt
        read STMTS MISSED COVERAGE <<< $(awk '/TOTAL/{print $2, $3, $4}' coverage.txt)
        echo "stmts=$STMTS" >> "$GITHUB_ENV"
        echo "missed=$MISSED" >> "$GITHUB_ENV"
        echo "coverage=$COVERAGE" >> "$GITHUB_ENV"
        # put it into the summary too
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Total Statements: $STMTS" >> $GITHUB_STEP_SUMMARY
        echo "- Missed Statements: $MISSED" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Percentage: $COVERAGE" >> $GITHUB_STEP_SUMMARY

    - name: Display coverage percentage
      run: |
        echo "Total Statements: $stmts"
        echo "Total missed statements: $missed"
        echo "Total Coverage Percentage: $coverage"